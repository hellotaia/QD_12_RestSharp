// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace QD_12_RestSharp.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RestSharp")]
    public partial class RestSharpFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ApiTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RestSharp", "API tests performed for 2 endpoints: \r\ntag1 tests - reqres.in\r\ntag2 tests - api.m" +
                    "athjs.org", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute API tests - GET call")]
        [NUnit.Framework.CategoryAttribute("task1")]
        [NUnit.Framework.TestCaseAttribute("Get list users", "/users?page=2", "200", null)]
        [NUnit.Framework.TestCaseAttribute("Get single user not found", "/users/23", "404", null)]
        [NUnit.Framework.TestCaseAttribute("Get single <2>", "/unknown/2", "200", null)]
        [NUnit.Framework.TestCaseAttribute("Get delayed response", "/users?delay=3", "200", null)]
        public virtual void ExecuteAPITests_GETCall(string scenarioName, string endpoint, string code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "task1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ScenarioName", scenarioName);
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("code", code);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute API tests - GET call", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
testRunner.Given("a base URL is https://reqres.in/api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
testRunner.When(string.Format("GET call executed to {0}", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
testRunner.Then(string.Format("the status code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute API tests - POST/PUT/PATCH call")]
        [NUnit.Framework.CategoryAttribute("task1")]
        [NUnit.Framework.TestCaseAttribute("Post create", "POST", "/api/users", "201", "name", "morpheus", "job", "leader", null)]
        [NUnit.Framework.TestCaseAttribute("Put update", "PUT", "/api/users/2", "200", "name", "morpheus", "job", "zion resident", null)]
        [NUnit.Framework.TestCaseAttribute("Patch update", "PATCH", "/api/users/2", "200", "name", "morpheus", "job", "zion resident", null)]
        public virtual void ExecuteAPITests_POSTPUTPATCHCall(string scenarioName, string method, string endpoint, string code, string key1, string value1, string key2, string value2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "task1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ScenarioName", scenarioName);
            argumentsOfScenario.Add("method", method);
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("code", code);
            argumentsOfScenario.Add("key1", key1);
            argumentsOfScenario.Add("value1", value1);
            argumentsOfScenario.Add("key2", key2);
            argumentsOfScenario.Add("value2", value2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute API tests - POST/PUT/PATCH call", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
testRunner.Given("a base URL is https://reqres.in/api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table1.AddRow(new string[] {
                            string.Format("{0}", key1),
                            string.Format("{0}", value1)});
                table1.AddRow(new string[] {
                            string.Format("{0}", key2),
                            string.Format("{0}", value2)});
#line 22
testRunner.When(string.Format("{0} is executed to {1} using", method, endpoint), ((string)(null)), table1, "When ");
#line hidden
#line 26
testRunner.Then(string.Format("the status code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table2.AddRow(new string[] {
                            string.Format("{0}", key1),
                            string.Format("{0}", value1)});
                table2.AddRow(new string[] {
                            string.Format("{0}", key2),
                            string.Format("{0}", value2)});
#line 27
testRunner.And("the following fields and values are in the response", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute API tests - Register/Login/Delete")]
        [NUnit.Framework.CategoryAttribute("task1")]
        [NUnit.Framework.TestCaseAttribute("Delete delete", "DELETE", "/api/users/2", "204", "name", "morpheus", "job", "zion resident", null)]
        [NUnit.Framework.TestCaseAttribute("Post register successful", "POST", "/api/register", "201", "email", "eve.holt@reqres.in", "password", "pistol", null)]
        [NUnit.Framework.TestCaseAttribute("Post login unsuccessful", "POST", "/api/login", "400", "email", "peter@klaven", "-", "-", null)]
        public virtual void ExecuteAPITests_RegisterLoginDelete(string scenarioName, string method, string endpoint, string code, string key1, string value1, string key2, string value2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "task1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ScenarioName", scenarioName);
            argumentsOfScenario.Add("method", method);
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("code", code);
            argumentsOfScenario.Add("key1", key1);
            argumentsOfScenario.Add("value1", value1);
            argumentsOfScenario.Add("key2", key2);
            argumentsOfScenario.Add("value2", value2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute API tests - Register/Login/Delete", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
testRunner.Given("a base URL is https://reqres.in/api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table3.AddRow(new string[] {
                            string.Format("{0}", key1),
                            string.Format("{0}", value1)});
                table3.AddRow(new string[] {
                            string.Format("{0}", key2),
                            string.Format("{0}", value2)});
#line 42
testRunner.When(string.Format("{0} is executed to {1} using", method, endpoint), ((string)(null)), table3, "When ");
#line hidden
#line 46
testRunner.Then(string.Format("the status code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Math API - math operations")]
        [NUnit.Framework.CategoryAttribute("task2")]
        [NUnit.Framework.TestCaseAttribute("Multiply", "2*6", "12", "200", null)]
        [NUnit.Framework.TestCaseAttribute("Divide", "10 / 2", "5", "200", null)]
        [NUnit.Framework.TestCaseAttribute("Add", "4+5", "9", "200", null)]
        [NUnit.Framework.TestCaseAttribute("Subtract", "8 - 3", "5", "200", null)]
        [NUnit.Framework.TestCaseAttribute("SquareRoot", "sqrt(16)", "4", "200", null)]
        public virtual void MathAPI_MathOperations(string operation, string expression, string expectedResult, string code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "task2"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("operation", operation);
            argumentsOfScenario.Add("expression", expression);
            argumentsOfScenario.Add("expectedResult", expectedResult);
            argumentsOfScenario.Add("code", code);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Math API - math operations", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
testRunner.Given("a base URL is http://api.mathjs.org/v4/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
testRunner.When(string.Format("{0} action is executed with {1}", operation, expression), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
testRunner.Then(string.Format("the status code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
testRunner.And(string.Format("the {0} is in the response", expectedResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
